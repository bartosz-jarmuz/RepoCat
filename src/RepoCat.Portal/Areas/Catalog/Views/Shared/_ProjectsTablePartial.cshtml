@using RepoCat.Portal.Areas.Catalog.Models
@using RepoCat.RepositoryManagement.Service

@model ProjectsTableModel

<div class="row">
    <div class="col-md-12">
        <div class="card search-panes">
            <div class="card-header" style="cursor: pointer;" data-toggle="collapse" data-target="#SearchPanesCard" id="SearchPanesCollapser" aria-expanded="true">
                <div data-toggle="tooltip" title="Search and filter the projects table">
                    <span class="">Table search</span>
                    <div class="card-header-actions">
                        <a class="card-header-action btn-minimize" href="#">
                            <i class="icon-arrow-up toggler-icon align-bottom"></i>
                        </a>
                    </div>
                </div>
            </div>
            <div class="collapse show" id="SearchPanesCard">
            </div>
        </div>
    </div>

    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12" id="PropertyFilters">

                    </div>
                </div>
                <div id="HiddenPropertyFilters" class="row">
                    <div class="col-md-12">
                        @foreach (var property in Model.Properties)
                        {
                            <span style="display:none;" class="filter-host">
                                <span style="display:inline-block;">
                                    <partial name="_BadgePropertyFilter" model="@(new PropertyFilterBadgeViewModel(property, "filter-label"))" />
                                    <select class="form-control select2 select2-inline property-filter" multiple="multiple" data-toggle="tooltip" style="width: 20em;" data-property="@property.Key"
                                            title="Filter by @property.Key" placeholder="Click to add a new filter">
                                        @foreach (var value in property.Values)
                                        {
                                            <option value="@value.Value">@value.Value</option>
                                        }
                                    </select>
                                </span>
                            </span>
                        }
                    </div>
                </div>
                <div id="PropertyFilterButtons" style="margin-bottom: 1em;">
                    <span class="text text-sm-left font-weight-bold font-sm">Filter by properties:&nbsp;</span>
                    <span>
                        @foreach (var property in Model.Properties)
                        {
                            <partial name="_BadgePropertyFilter" model="@(new PropertyFilterBadgeViewModel(property, "add-filter"))" />
                        }
                    </span>
                </div>

                <table id="ResultsTable" class="table table-striped table-bordered wrap  project-card" width="100%">
                    <thead>
                        <tr>
                            <!--Expander button-->
                            <th></th>
                            <!--Hidden content for expanded row-->
                            <th style="display:none;"></th>
                            <th class="repository-name">Repository</th>
                            <th style="min-width: 10%;">Project Name</th>
                            <th>Type</th>
                            <th>Description</th>
                            <th>Documentation</th>
                            <th>Tags</th>
                            <th style="min-width: 10%;">Properties</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (ProjectInfoViewModel project in Model.Projects)
                        {
                            <tr class="component">
                                <!--Expander button-->
                                <td></td>
                                <!--Hidden content for expanded row-->
                                <td class="break-all"><div class="details-view" style="display:none;"><partial name="_ProjectViewPartial" for="@project" /></div></td>
                                <td class="break-all"><div class="repository-name"><partial name="_BadgeRepository" model="@(new RepositoryQueryParameter(project.OrganizationName, project.RepositoryName))" /></div></td>
                                <td class="break-all" data-order="@project.ProjectName"><partial name="_CellProjectName" for="@project" /></td>
                                <td class="break-all"><partial name="_BadgeProjectType" for="@project" /></td>
                                <td class="break-word"><partial name="_CellProjectDescription" for="@project" /></td>
                                <td class="break-all"><partial name="_CellProjectDocumentationUri" for="@project" /></td>
                                <td class="break-all"><partial name="_CellProjectTags" for="@project" /></td>
                                <td class="break-word"><partial name="_CellProjectProperties" for="@project" /></td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    docReady(function () {
        if (getCookie('searchPanesOpen') == 'false') {
            $('#SearchPanesCard').removeClass('show');
            setArrowDown($('#SearchPanesCollapser').find('.toggler-icon'));
        }

        var showRepositoryColumn = false;
        if ('@Model.IsMultipleRepositories' === '@true.ToString()') {
            showRepositoryColumn = true;
        }

        
        $.fn.dataTable.ext.search.push(
            function (settings, searchData, index, rowData, counter) {
                var activeFilters = $('.filter-active');
                if (!activeFilters) {
                    return true;
                }
                var filters = [];
                activeFilters.each(function () {
                    var value = $(this).val();
                    if (value.length > 0) {
                        var filter = { key: $(this).data('property'), value: value}
                        filters.push(filter);
                    }
                });

                if (filters.length === 0) {
                    return true;
                }

                var properties = [];
                var propertyPairs = $($(rowData[8]).filter(function (tag) { return this.tagName === 'DIV' }));
                propertyPairs.each(function () {
                    var propertyName = $(this).find('.property-name').text();
                    var val = $(this).find('.description').text().trim();
                    var property = { key: propertyName, value: val };
                    properties.push(property);
                });



                var shouldBeVisible = true;
                var numberOfMatchedProperties = 0;
                filters.forEach(function (filter) {
                    //find a property for the given filter
                    var property = properties.filter(function (p) { return p.key === filter.key }).find(function () { return true;});
                    if (property) {
                        var propertyMatched = false;
                        filter.value.forEach(function (filterValue) {
                            if (filterValue === property.value) {
                                propertyMatched = true;
                            }
                        });
                        if (!propertyMatched) {
                            shouldBeVisible = false;
                            return;
                        }
                    } else {
                        //the project row does not contain this property.
                    }
                });
                
                return shouldBeVisible;
            }
        );

        var table = $('#ResultsTable').DataTable({
            pageLength: 100,
            stateSave: false,
            "autoWidth": true,
            "processing": true,
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            order: [[3, 'asc']],
            searchPanes: {
                layout: "columns-4",
                columns: [3, 4, 7,8],
                cascadePanes: true,
                viewTotal: true,
                dataLength: 30,
                dtOpts: {
                    order: [[1, 'desc']]
                }

            },
            "columnDefs": [
                {
                    "targets": [0],
                    "visible": true,
                    "searchable": false,
                    "width" : "2%"
                },
                {
                    "targets": [1],
                    "visible": false,
                },
                {
                    "targets": [2],
                    "visible": showRepositoryColumn,
                },
                {
                    "targets": [3],
                    "max-width" : "15%"
                },
                {
                    "targets": [5],
                    "max-width" : "25%"
                },

            ],

            columns: [
                {
                    "className": 'details-control',
                    "orderable": false,
                    "data": null,
                    "defaultContent": ''
                }, //expnder
                null,//hidden content for expanded row
                null, //repo name
                {
                    searchPanes: {
                        show: true,
                        orthogonal: 'sp'
                    },
                    render: function (data, type, row) {
                        if (type === 'sp') {
                            var tags = [];
                            $(data).closest('.project-name').each(function (index) {
                                var val = $(this).text();
                                val = val.trim();
                                if (val.length > 0) {
                                    tags.push(val);
                                }
                            });
                            return tags;
                        }
                        return data;
                    }
                }, //project name
                {
                    searchPanes: {
                        show: true,
                    },
                },
                null,
                null,
                {
                    searchPanes: {
                        show: true,
                        orthogonal: 'sp'

                    },
                    render: function (data, type, row) {
                        if (type === 'sp') {
                            var tags = [];
                            $($(data), "i").each(function (index) {
                                var val = $(this).text();
                                val = val.trim();
                                if (val.length > 0) {
                                    tags.push(val);
                                }
                            });
                            return tags;
                        }
                        return data;
                    }
                },
                {
                    searchPanes: {
                        show: true,
                        orthogonal: 'sp'

                    },
                    render: function (data, type, row) {
                        if (type === 'sp') {
                            var tags = [];
                            var descriptions = $(data).children().closest('.description');
                            descriptions.each(function (index) {
                                var val = $(this).text();
                                val = val.trim();
                                if (val.length > 0) {
                                    tags.push(val.substring(0, 40));
                                }
                            });
                            return tags;
                        }
                        return data;
                    }
                },
            ],

            dom: "<'#SearchPanesHost'P>"
                +"<'row'<'col-md-1'l><'col-md-11'f>>"
               + "<rtip> ",

        });


        $("#SearchPanesHost").appendTo("#SearchPanesCard");

        $('#SearchPanesCollapser').on('click', function () {
            if ($('#SearchPanesCard').hasClass('show')) {
                setCookie('searchPanesOpen', 'false');
            } else {
                setCookie('searchPanesOpen', 'true');
            }
        });

        $('#ResultsTable tbody').on('click', 'td.details-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                $('div.slider', row.child()).slideUp(function () {
                    row.child.hide();
                    tr.removeClass('shown');
                });
            }
            else {
                row.child(format(row.data())).show();
                tr.addClass('shown');
                $('div.slider', row.child()).slideDown();
            }
        });


        alignSearchPanel();


        $('.property-filter').on('change', function () {
            if ($(this).hasClass('filter-active')) {
                table.draw();
            }
        });


        $('.filter-toggle').on('click', function () {
            var data = $(this).data('property');
            if ($(this).hasClass('add-filter')) {
                var filterHost = $('.property-filter[data-property="' + data + '"').closest('.filter-host');
                filterHost.appendTo($('#PropertyFilters'))
                filterHost.find('.property-filter').addClass('filter-active');
                filterHost.fadeIn();
                filterHost.find('i').removeClass('fa-plus').addClass('fa-minus');
                $(this).hide();
                filterHost.find('input').attr('style', 'width: inherit;')
                filterHost.find('.badge-property-name').attr('title', 'Remove filtering option');
                filterHost.find('.property-filter').trigger("change");
            }
            if ($(this).hasClass('filter-label')) {
                var $host = $($(this).closest('.filter-host'));
                $host.hide();
                $host.find('.property-filter').removeClass('filter-active');
                $host.appendTo('#HiddenPropertyFilters');
                $('.add-filter[data-property="' + data + '"').show();
                table.draw();
            }


        });

    });

    function format(d) {
        var arr = Object.values(d);
        var details = $(arr[0]);
        return details.html();
    }
    function alignSearchPanel() {
        var input = $('#ResultsTable_filter label input').appendTo($('#ResultsTable_filter')).wrap( "<div class='col'></div>" );
        $('#ResultsTable_filter label').remove();
        $(input).attr('style', 'width: 100%; margin-left: 1rem; margin-right: 1rem;');
        $(input).attr('placeholder', 'Search table content...');
    }
</script>
