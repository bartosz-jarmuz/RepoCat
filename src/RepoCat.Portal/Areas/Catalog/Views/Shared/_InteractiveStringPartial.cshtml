@using RepoCat.Portal.Areas.Catalog.Models;
@model RepoCat.Portal.Areas.Catalog.Models.InteractiveStringModel
@{
    var type = Model.GetDataType();
    var displayText = Model.PropertyValue;


    string imageTag = "";
    if (!string.IsNullOrEmpty(Model.ImageClassName))
    {
        imageTag = " <i class=\"" + Model.ImageClassName + "\"></i> ";
    }
    else
    {
        if (type == InteractiveStringModel.DataType.Url)
        {
            imageTag = " <i class=\"fa fa-external-link-alt\"></i> ";
        }
        if (type == InteractiveStringModel.DataType.Path)
        {
            imageTag = " <i class=\"fas fa-download\"></i> ";
        }
        if (type == InteractiveStringModel.DataType.Email)
        {
            imageTag = " <i class=\"fa fa-envelope\"></i> ";
        }
    }



    switch (type)
    {
        case InteractiveStringModel.DataType.Text:
            @displayText
            break;
        case InteractiveStringModel.DataType.Url:
            <a href="@Model.PropertyValue" target="_blank" class="@Model.ClassName"
               data-toggle="tooltip" title="@Model.PropertyValue">@displayText @Html.Raw(@imageTag)</a>
            break;
        case InteractiveStringModel.DataType.Path:
            <a class="download-link" href="@Url.Action("Download", "Download", new { id = Model.ProjectId, componentName = Model.ComponentName, Model.PropertyKey })"
               data-toggle="tooltip" title="@Model.PropertyValue">@displayText @Html.Raw(@imageTag)</a>
            break;
        case InteractiveStringModel.DataType.Email:
            <a target="_blank" href="mailto:@(Model.PropertyValue)" class="@Model.ClassName"
               data-toggle="tooltip" title="@Model.PropertyValue">@displayText @Html.Raw(@imageTag)</a>
            break;
        case InteractiveStringModel.DataType.Collection:
            var list = (Model.PropertyValue as IEnumerable<string>).ToList();
            if (list.Count > 1)
            {
                <select class="font-sm select2-deferred">
                    @foreach (var item in Model.PropertyValue as IEnumerable<string>)
                    {
                        <option>@item</option>
                    }
                </select>
            }
            else
            {
                @list[0];
                break;
            }

            break;
        default:
            break;
    }

}
