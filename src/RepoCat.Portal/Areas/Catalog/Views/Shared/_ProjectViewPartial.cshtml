@using RepoCat.Portal.Areas.Catalog.Models
@using RepoCat.RepositoryManagement.Service;
@model ProjectInfoViewModel

@if (false)
{
    <partial name="_ProjectWithComponentsViewPartial" model="@Model" />
}
else
{
    var projectsCardCols = "col-md-12";
    var projectInfoCols = "col-md-4";
    var projectDescriptionCols = "col-md-8";
    if (string.IsNullOrEmpty(Model.ProjectDescription) && !Model.Properties.Any())
    {
        projectsCardCols = "col-md-6";
        projectInfoCols = "col-md-12";
        projectDescriptionCols = "d-none";

    }
    <div id="@Model.GetIdentifier()" class="project-card slider">
        <div class="row">
            <div class="@projectsCardCols">

                <div class="card card-accent-primary">
                    <div class="card-header condensed">
                        <small class="help-block text-secondary">Project details:</small>
                        <strong class="d-block">@Model.ProjectName</strong>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="@projectInfoCols project-info">
                                <dl>
                                    <dt>Tags:</dt>
                                    <dd>
                                        <partial name="_TagsList" model="@(new TagsListViewModel(Model.OrganizationName, Model.RepositoryName, -1, Model.Tags, Model.Components.SelectMany(x => x.Tags)))" />
                                    </dd>

                                    @{
                                        var outputFileName = @Model.GetOutputFileName() ?? "";
                                        var outputLabel = "Script file name";
                                        if (outputFileName.EndsWith(".dll", StringComparison.OrdinalIgnoreCase) ||
                                            outputFileName.EndsWith(".exe", StringComparison.OrdinalIgnoreCase)
                                            )
                                        {
                                            outputLabel = "Assembly file name";
                                        }
                                    }

                                    <dt>@outputLabel:</dt>
                                    <dd>@outputFileName</dd>

                                    <dt>Owner:</dt>
                                    <dd>@Model.Owner</dd>

                                    <dt>Documentation:</dt>
                                    <dd class="project-path">
                                        <partial name="_InteractiveStringPartial" model="@(new InteractiveStringModel(Model.Id, null, nameof(Model.DocumentationUri), Model.DocumentationUri, "help-link", "fa fa-external-link-alt"))" />
                                    </dd>

                                    <dt>Project path:</dt>
                                    <dd class="project-path">
                                        <partial name="_InteractiveStringPartial" model="@(new InteractiveStringModel(Model.Id, null, nameof(Model.ProjectUri), Model.ProjectUri, "help-link", "fa fa-external-link-alt"))" />
                                    </dd>
                                    
                                    <dt>
                                        @if (string.IsNullOrEmpty(Model.DownloadLocation))
                                        {
                                            <button disabled class="badge badge-download download-link disabled">Download:</button>
                                        }
                                        else
                                        {
                                            <a class="badge badge-download download-link" href="@Url.Action("Download", "Download", new { id = Model.Id })">Download:</a>
                                            <span class="download-count" data-toggle="tooltip" title="Number of downloads so far"><i class="fas fa-download"></i>&nbsp;<span>@Model.DownloadsCount</span></span>
                                        }
                                    </dt>
                                    <dd class="project-path download">
                                        <partial name="_InteractiveStringPartial" model="@(new InteractiveStringModel(Model.Id, null, nameof(Model.DownloadLocation), Model.DownloadLocation, "help-link", "fas fa-download"))" />
                                    </dd>
                                </dl>

                            </div>
                            <div class="@projectDescriptionCols project-description">
                                <dl>
                                    <dt>Project description:</dt>
                                    <dd>@Model.ProjectDescription</dd>
                                </dl>
                                <dl>
                                    <dt>Project properties:</dt>
                                    @foreach (var property in Model.Properties)
                                    {
                                        <partial name="_PropertyPartial" model="@(new PropertyPartialViewModel(Model.Id, null, property))" />
                                    }
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.Components.Any())
            {
                @foreach (var component in Model.Components)
                {
                    <div class="col-md-6">

                        <div class="card card-accent-primary">
                            <div class="card-header condensed">
                                <small class="help-block text-secondary">Component details:</small>
                                <strong class="d-block">@component.Name</strong>
                            </div>
                            <div class="card-body">
                                <div class="component-main">
                                    <div class="">
                                        <span class="component-label">Docs link:&nbsp;</span>
                                        @if (!string.IsNullOrEmpty(component.DocumentationUri))
                                        {
                                            <partial name="_InteractiveStringPartial" model="@(new InteractiveStringModel(Model.Id, component.Name, nameof(component.DocumentationUri), component.DocumentationUri, "help-link", "fa fa-external-link-alt"))" />

                                        }
                                    </div>
                                    <div>
                                        <span class="component-label description">Description:&nbsp;</span>
                                        <span class="description">
                                            @component.Description
                                        </span>
                                    </div>
                                    <div>
                                        <span class="component-label">Tags:&nbsp;</span>
                                        <partial name="_TagsList" model="@(new TagsListViewModel(Model.OrganizationName, Model.RepositoryName, -1, Model.Tags, Model.Components.SelectMany(x=>x.Tags)))" />
                                    </div>
                                    <dl>
                                        <dt>Properties:</dt>
                                        @foreach (var property in component.Properties)
                                        {
                                            <partial name="_PropertyPartial" model="@(new PropertyPartialViewModel(Model.Id, component.Name, property))" />
                                        }
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}