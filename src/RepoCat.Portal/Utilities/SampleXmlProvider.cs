using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.Xml.XMLGen;

namespace RepoCat.Portal.Utilities
{
    /// <summary>
    /// Generates a sample XML
    /// </summary>
    public static class SampleManifestXmlProvider
    {
        /// <summary>
        ///  Gets a sample component manifest XML
        /// </summary>
        /// <returns>List&lt;System.String&gt;.</returns>
        public static string GetComponentManifest()
        {
            string rawXml = GetRawXml();
            XDocument manifest = XDocument.Parse(rawXml);
            return PostProcess(manifest).ToString();
        }

        private static XDocument PostProcess(XDocument manifest)
        {
            if (manifest?.Root != null)
            {
                var count = manifest.Root.Elements().Count();

                //the autogenerated XML is too clunky
                for (int i = count-1; i > 0; i--)
                {
                    if (i > 0)
                    {
                        var element = manifest.Root.Elements().ElementAt(i);
                        element.Remove();
                    }
                }

                var component = manifest.Root.Elements().FirstOrDefault();
                component?.Element("Tags")?.Attribute("Values")?.SetValue("Multiple;Tags;Allowed");
                
            }



            return manifest;
        }

        private static string GetRawXml()
        {
            XmlSampleGenerator generator = new XmlSampleGenerator(
                "https://raw.githubusercontent.com/bartosz-jarmuz/RepoCat/master/src/RepoCat.Schemas/ComponentManifest.xsd",
                new XmlQualifiedName("Components", "https://github.com/bartosz-jarmuz/RepoCat"));
            string rawXml;
            using (var writer = new StringWriter())
            {
                generator.WriteXml(XmlWriter.Create(writer));
                rawXml = writer.ToString();
            }

            return rawXml;
        }
    }
}
